from pyteomics import mzml

def MS2(mzml_file):
    """This function takes an mzml file path and outputs only the first ten MS2 scans
    """
    # ms2_spectra = [spectrum for spectrum in reader if spectrum['ms level'] == 2]
    with mzml.MzML(mzml_file) as data:
        count = 0
        ms2_spectra = []
        for spectrum in data:
            if spectrum['ms level'] == 2:
                ms2_spectra.append(spectrum)
                count += 1
                if count > 10:
                    break

    return MS2


# function to work with only one ms2 scan
def MS2spectrum(mzml_file, scan):
    """This is a function to extract only one ms2 scan

    Args:
        mzml_file (mzml): has a bunch of spectra 
        scan (int): just a number

    Returns:
        mzml scan extract with metadata
    """
    # open the file and read it in as 'data'
    with mzml.MzML(mzml_file) as data:
        # for each scan in the data, if it is ms2 scan
        for spectrum in data:
            if spectrum['ms level'] == 2:
                # does the spectrum contain a scanList?
                if 'scanList' in spectrum:
                    # breaking id into parts at each '=' sign and picking the last part
                    # 'int' changes the text into a number
                    spectrum_scan_number = int(spectrum['id'].split('=')[-1])
                    # does this scan number match the scan we want?
                    if spectrum_scan_number == scan:
                        return spectrum
    print(f"Scan {scan} not found")
    return None

# Function that plots a mass spectrum.
import matplotlib.pyplot as plt

def plot_2(spectrum, x_min=None, x_max=None, title=None):
    X = spectrum['m/z array']
    Y = spectrum['intensity array']
    Y_max = max(Y)
    Y_percentage = [(y / Y_max) * 100 for y in Y]

    # set x-axis limits
    if x_min is None:
        x_min = min(X)
    if x_max is None:
        x_max = max(X)

    plt.figure(figsize=(10,6))
    plt.vlines(X, 0, Y_percentage, colors='black') # vertical lines at each m/z 

    plt.title(title)
    plt.xlabel('m/z')
    plt.ylabel('Intensity')
    plt.xlim(x_min, x_max)
    plt.ylim(0, 105)
    
    plt.title(f"Mass Spectrum at scan 8")
    plt.show()


def peak_differences(mz_list): # mz_list is a list containing all the m/z values from a mass spectrum, each value is an ion detected in the mass spec
    """This function calculates the pairwise differences of the elements in the m/z array of an ms2 spectra
    and returns a list of differences.

    Args:
        mz_list
    """
    differences = []
    for i in range(len(mz_list)):
        for j in range(i+1, len(mz_list)):
            mz1 = mz_list[i]
            mz2 = mz_list[j]
            difference = abs(mz1-mz2)
            differences.append(difference)   
    return differences


def find_matches(differences, dictionary, tolerance):
    """this function calculates the absolute difference between the numbers in our differences and 
    each mass in the amino acid mass dictionary and checks if the difference is less than or equal to the tolerance
    """
    matches = []
    for number in differences:
        for key, value in dictionary.items():
            diff = abs(number-value)

            if diff <= tolerance:
                match_info = f"{number} is close to {key}: {value}"
                matches.append(match_info)
                print(f"Match found! {match_info}")
    return matches                

# peaks = find_matches(current_differences, amino_acid_masses, tolerance=0.1)

def find_non_matches(differences, dictionary, tolerance):
    """ This function is supposed to return all the peak differences that don't match any known amino acid mass"""
    non_matches = []
    for number in differences:
        for key, value in dictionary.items():
            diff = abs(number-value)

            if diff > tolerance:
                non_matches.append(number)
    return non_matches


import matplotlib.pyplot as plt
import numpy as np
def plot_scatter(values, counts):
    plt.figure(figsize=(10, 6))
    
    # Plotting the scatter plot
    scatter = plt.scatter(
        values,
        counts,
        c=counts,
        cmap='viridis',
        s=np.clip(counts / max(counts) * 100, 10, 50),
        edgecolor='black',
        alpha=0.4
    )

    # Adding colorbar
    cbar = plt.colorbar(scatter)
    cbar.set_label('Count of Non-matches')

    # Show the plot
    plt.show()
